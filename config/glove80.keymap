/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))
#define MEH LC(LS(LALT)))

// layers
#define BASE 0
#define LOWER 1
#define RAISE 2
#define MAGIC 3

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79


/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        #define TYPING_STREAK_TERM 160
        #define KEY_REPEATING_TERM 300
        #define HOMEY_TAPPING_TERM 280
        #define INDEX_TAPPING_TERM 180
        #define LEFT_HAND_KEYS      \
              0  1  2  3  4         \
             10 11 12 13 14 15      \
             22 23 24 25 26 27      \
             34 35 36 37 38 39      \
             46 47 48 49 50 51      \
             64 65 66 67 68
        #define RIGHT_HAND_KEYS     \
                                               5  6  7  8  9 \
                                           16 17 18 19 20 21 \
                                           28 29 30 31 32 33 \
                                           40 41 42 43 44 45 \
                                           58 59 60 61 62 63 \
                                              75 76 77 78 79
        #define THUMB_KEYS          \
                            69 52       57 74                \
                             70 53     56 73                 \
                              71 54   55 72
        homey_left: miryoku_home_row_mods_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            flavor = "balanced";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_TAPPING_TERM>;
            quick-tap-ms = <TYPING_STREAK_TERM>;
            global-quick-tap; // with typing streak
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        homey_right: miryoku_home_row_mods_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_HAND";
            flavor = "balanced";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_TAPPING_TERM>;
            quick-tap-ms = <TYPING_STREAK_TERM>;
            global-quick-tap; // with typing streak
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        index_left: miryoku_home_row_mods_left_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_INDEX_SHIFT";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <INDEX_TAPPING_TERM>;
            quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
            //global-quick-tap; // no typing streak
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        index_right: miryoku_home_row_mods_right_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_INDEX_SHIFT";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <INDEX_TAPPING_TERM>;
            quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
            //global-quick-tap; // no typing streak
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

        ZMK_MACRO(dot_spc,
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        )
    };

    combos {
        compatible = "zmk,combos";

        combo_caps_word {
          timeout-ms = <50>;
          key-positions = <POS_LH_C2R4 POS_RH_C2R4>;
          bindings = <&caps_word>;
          layers = <DEFAULT>;
        };

        combo_dot_spc {
          timeout-ms = <50>;
          key-positions = <POS_LH_T4 POS_RH_T4>;
          bindings = <&dot_spc>;
          layers = <DEFAULT>;
        };

        combo_equal {
          timeout-ms = <50>;
          key-positions = <POS_RH_C1R4 POS_RH_C2R4>;
          bindings = <&kp EQUAL>;
          layers = <DEFAULT>;
        };

        // [
        combo_lbkt {
          timeout-ms = <50>;
          key-positions = <POS_RH_C2R3 POS_RH_C2R4>;
          bindings = <&kp LBKT>;
          layers = <DEFAULT>;
        };

        // ]
        combo_rbkt {
          timeout-ms = <50>;
          key-positions = <POS_RH_C4R3 POS_RH_C4R4>;
          bindings = <&kp RBKT>;
          layers = <DEFAULT>;
        };

        // {
        combo_lbrc {
          timeout-ms = <50>;
          key-positions = <POS_RH_C2R3 POS_RH_C3R3>;
          bindings = <&kp LBRC>;
          layers = <DEFAULT>;
        };

        // }
        combo_rbrc {
          timeout-ms = <50>;
          key-positions = <POS_RH_C3R3 POS_RH_C4R3>;
          bindings = <&kp RBRC>;
          layers = <DEFAULT>;
        };

        // (
        combo_lpar {
          timeout-ms = <50>;
          key-positions = <POS_RH_C2R4 POS_RH_C3R4>;
          bindings = <&kp LPAR>;
          layers = <DEFAULT>;
        };

        // )
        combo_rpar {
          timeout-ms = <50>;
          key-positions = <POS_RH_C4R4 POS_RH_C3R4>;
          bindings = <&kp RPAR>;
          layers = <DEFAULT>;
        };

        // <
        combo_lt {
          timeout-ms = <50>;
          key-positions = <POS_RH_C2R5 POS_RH_C3R5>;
          bindings = <&kp LT>;
          layers = <DEFAULT>;
        };

        // >
        combo_gt {
          timeout-ms = <50>;
          key-positions = <POS_RH_C3R5 POS_RH_C4R5>;
          bindings = <&kp GT>;
          layers = <DEFAULT>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
               &kp F1               &kp F2              &kp F3              &kp F4               &kp F5                                                                                               &kp F6               &kp F7               &kp F8                   &kp F9               &kp F10
            &kp EQUAL               &kp N1              &kp N2              &kp N3               &kp N4  &kp N5                                                                 &kp N6                &kp N7               &kp N8               &kp N9                   &kp N0             &kp MINUS
              &kp TAB                &kp Q               &kp W               &kp E                &kp R   &kp T                                                                  &kp Y                 &kp U                &kp I                &kp O                    &kp P              &kp BSLH
              &mt LCTRL ESC &homey_left LCTRL A  &homey_left LALT S  &homey_left LGUI D  &index_left LSHFT F   &kp G                                                                  &kp H  &index_right RSHFT J  &homey_right RGUI K  &homey_right RALT L  &homey_right RCTRL SEMI               &kp SQT
            &kp LSHFT                &kp Z               &kp X               &kp C                &kp V   &kp B  &kp LGUI  &kp LCTRL  &kp LALT  &kp RALT  &kp RCTRL   &kp RGUI   &kp N                 &kp M            &kp COMMA              &kp DOT                 &kp FSLH             &kp RSHFT
 &magic MAGIC 0               &trans       &kp LS(GRAVE)             &kp ESC              &kp TAB          &kp BSPC      &lt LOWER ESC     &mo RAISE     &none    &kp RET  &kp SPACE                  &kp LS(LBKT)         &kp LS(RBKT)             &kp LBKT                 &kp RBKT  &magic MAGIC 0
            >;
        };

        lower_layer {
            label = "Lower";
            bindings = <
 &trans             &trans             &trans             &trans             &trans                                                                      &trans  &trans     &trans  &trans  &trans
 &trans             &trans             &trans             &trans             &trans  &trans                                                    &trans    &trans  &trans     &trans  &trans  &trans
 &trans  &kp LC(LA(LG(Q)))  &kp LC(LA(LG(W)))  &kp LC(LA(LG(E)))      &kp LA(LG(A))  &trans                                                    &trans    &trans  &trans     &trans  &trans  &trans
 &trans  &kp LC(LA(LG(A)))  &kp LC(LA(LG(S)))  &kp LC(LA(LG(D)))  &kp LC(LA(LG(F)))  &trans                                                  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
 &trans  &kp LC(LA(LG(Z)))  &kp LC(LA(LG(X)))  &kp LC(LA(LG(C)))      &kp LA(LG(S))  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans  &trans
 &trans             &trans             &trans             &trans             &trans          &trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans     &trans  &trans  &trans
            >;
        };

        raise_layer {
            label = "Raise";
            bindings = <
  &trans   &trans   &trans   &trans   &trans                                                                             &trans     &trans       &trans   &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans                                                          &trans      &trans  &kp FSLH  &kp LS(N8)  &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans                                                  &kp LS(EQUAL)     &kp N7    &kp N8      &kp N9  &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans                                                      &kp MINUS     &kp N4    &kp N5      &kp N6  &trans   &trans
  &trans   &trans   &trans   &trans   &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans     &kp LS(N3)     &kp N1    &kp N2      &kp N3  &trans   &trans
  &trans   &trans   &trans   &trans   &trans          &trans  &trans  &trans  &trans  &trans  &kp N0                 &kp COMMA   &kp DOT  &kp LS(N2)   &trans   &trans
            >;
        };

        magic_layer {
            label = "Magic";
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };


    };
};
